#!/usr/bin/env perl
use strict;
use warnings;

use Pod::Usage ();
use Getopt::Long ();

use File::Spec::Functions qw(catfile catdir);

use LWP::UserAgent ();
use Data::Validate::URI qw(is_uri);

our $VERSION = '0.01';

=head1 NAME

generate-garmin-img-from-osm - Generate a garmin F<.img> file from an OpenStreetMap F<.osm> file

=head1 SYNOPSIS

    generate-garmin-img-from-osm --osm "/var/www/osm.nix.is/dump/$(date --iso-8601).osm.bz2" --date=$(date --iso-8601) --min-osm-size=$((2*10**6)) --mkgmap-dir=/home/avar/src/mkgmap --osm2mp-dir=/home/avar/src/osm2mp --mapname 13314530 --description="Iceland OSM" --out-dir /var/www/osm.nix.is/root --out-file=Iceland.osm --out-mp=Iceland.mp

=head1 DESCRIPTION

Generate maps for L<http://osm.nix.is> in one giant ugly script.

Stick something like this in cron:

    perl /var/www/osm.nix.is/script/generate-garmin-img-from-osm --osm "/var/www/osm.nix.is/dump/$(date --iso-8601).osm.bz2" --date=$(date --iso-8601) --min-osm-size=$((2*10**6)) --mkgmap-dir=/home/avar/src/mkgmap --osm2mp-dir=/home/avar/src/osm2mp --mapname 13314530 --description="Iceland OSM" --out-dir /var/www/osm.nix.is/root --out-file=Iceland.osm --out-mp=Iceland.mp

Around an hour or so after running F<download-osm-with-retry>.

=head1 OPTIONS

=over

=item -h, --help

Display this help message

=item --osm

The path to the F<.osm> file, can be an URI in which case the script
will fetch the file with LWP.

=item --min-osm-size

Minimum size of the F<.osm> file, for sanity checking.

=item --mkgmap-dir

The path to the mkgmap directory, F<dist/mkgmap.jar> should be under
it.

=item --osm2mp-dir

The path to the F<osm2mp> directory, for creating routeable maps.

=item --mapname

8 digit UID for the map, see C<mkgmap> help for --mapname for further
info.

=item --description

Map description.

=item --out-dir

Output directory where we'll create F<archive/> and F<latest/> with
the F<.osm> and F<.img> files.

=item --out-file

Output F<.osm> filename.

=item --out-mp

Output F<.mp> filename.

=back

=cut

# Get command line options
Getopt::Long::Parser->new(
    config => [ qw(bundling no_ignore_case no_require_order) ],
)->getoptions(
    'h|help'         => \my $help,
    'osm=s'          => \my $osm,
    'min-osm-size=s' => \my $min_osm_size,
    'mkgmap-dir=s'   => \my $mkgmap_dir,
    'mapname=s'      => \my $mapname,
    'country-name=s' => \my $country_name,
    'country-abbr=s' => \my $country_abbr, # IOC or UNDP code??
    'description=s'  => \my $description,
    'osm2mp-dir=s'   => \my $osm2mp_dir,
    'out-dir=s'      => \my $out_dir,
    'out-file=s'     => \my $out_file,
    'out-mp=s'       => \my $out_mp,
    'date=s'         => \(my $date = do { my $d = `date --iso-8601`; chomp $d; $d }),
) or help();

help() if $help;

chdir $out_dir or die "Can't chdir($out_dir): $!";

# Directories
my $script_dir           = catdir($out_dir, 'script');
my $archive_dir          = catdir($out_dir, 'archive');

my $latest_dir           = catdir($out_dir, 'latest');
my $latest_dir_all       = catdir($out_dir, 'latest', 'all');
my $latest_dir_default   = catdir($out_dir, 'latest', 'default');
my $latest_dir_cyclemap  = catdir($out_dir, 'latest', 'cyclemap');

my $today_dir           = catdir($archive_dir, $date);
my $today_dir_all       = catdir($archive_dir, $date, 'all');
my $today_dir_default   = catdir($archive_dir, $date, 'default');
my $today_dir_cyclemap  = catdir($archive_dir, $date, 'cyclemap');

system "mkdir -p $today_dir";
system "mkdir -p $today_dir_all";
system "mkdir -p $today_dir_default";
system "mkdir -p $today_dir_cyclemap";

# The rest will be symlinked
system "mkdir -p $latest_dir";

chdir $today_dir or die "Can't chdir($today_dir): $!";

# I don't want this in the root, urgh!
my $cycle_out_file = $out_file;
$cycle_out_file =~ s/\./-cycle./;

# Convert to full path
$out_file = catfile($today_dir, $out_file);
$out_mp = catfile($today_dir, $out_mp);
my $out_stats = catfile($today_dir, 'STATS.txt');

if ($osm =~ /^http/) {
    system qq[wget --user-agent="See http://wiki.openstreetmap.org/index.php/Garmin_map_of_Iceland" -q -O- $osm | bzip2 -d - > $out_file] and die "wget: $!";
} else {
    if ($osm =~ /\.bz2/) {
        system qq[bzcat $osm > $out_file] and die "bzcat cp: $!";
    } else {
        system qq[cp $osm $out_file] and die "cp: $!";
    }
}


# Sanity check, should be more than around 20 MB
my $size = ((stat($out_file))[7]);
if ($min_osm_size and $min_osm_size > $size) {
    die "$out_file should be more than around 20 MB, it's $size bytes";
}

#
# Generate IMG files
#

my $country = (defined $country_name ? " --country-name='$country_name' " : '') .
              (defined $country_abbr ? " --country-abbr='$country_abbr' " : '');

## Default
chdir $today_dir_default or die "Can't chdir($today_dir_default): $!";
system qq[java -jar $mkgmap_dir/dist/mkgmap.jar --mapname=$mapname --description="$description" --latin1 --tdbfile $country --gmapsupp --route --net $out_file] and die "mkgmap: $!";
# This comes with the the tdb file, nuke
system qq[mv *.tdb $mapname.tdb] and die "mv: $!";
system qq[rm 63240000.img] and die "rm(63240000.img): $!";

## Cyclemap - see http://wiki.openstreetmap.org/index.php/OSM_Map_On_Garmin/Cycle_map
$mapname += 1;
chdir $today_dir_cyclemap or die "Can't chdir($today_dir_cyclemap): $!";
my $preprocess = catfile($script_dir, 'preprocess-osm-with-cvs');
my $cycling_csv = catfile(catdir($script_dir, 'res'), 'cycling-map-features.csv');

system qq[$^X $preprocess --csv $cycling_csv --osm $out_file --out $cycle_out_file >/dev/null] and die "preprocess: $!";
system qq[java -enableassertions -jar $mkgmap_dir/dist/mkgmap.jar --map-features=$cycling_csv --mapname=$mapname --description="$description cyclemap" --latin1 --road-name-pois $country --tdbfile --gmapsupp $out_file] and die "mkgmap: $!";

# This comes with the the tdb file, nuke
system qq[mv *.tdb $mapname.tdb] and die "mv: $!";
system qq[rm 63240000.img] and die "rm(63240000.img): $!";

#system qq[bzip2 $cycle_out_file];
# save space
system qq[rm $cycle_out_file];

## Default routeable
#$mapname += 1;

# run osm2mp on the .osm file to create a .mp file
chdir $osm2mp_dir or die "Can't chdir($osm2mp_dir): $!";

system qq[$^X osm2mp.pl --codepage 1252 $out_file > $out_mp 2>$out_stats];

## All
chdir $today_dir_all or die "Can't chdir($today_dir_all): $!";
system qq[java -jar $mkgmap_dir/dist/mkgmap.jar --gmapsupp $today_dir_default/gmapsupp.img $today_dir_cyclemap/gmapsupp.img] and die "mkgmap: $!";
# urgh, gmapsupp brings some crap along with it, nuke
map { system "rm $_" } grep { $_ ne 'gmapsupp.img' and $_ !~ /\.tdb$/ } glob "*";

# Compress the .osm and .mp files
system qq[bzip2 $out_file];
system qq[bzip2 $out_mp];

## Generate VERSION.txt
chdir $today_dir or die "Can't chdir($today_dir): $!";
open my $version, ">", "VERSION.txt" or die "Can't open VERSION.txt: $!";
print $version "mkgmap\n";
print $version qx[svn info $mkgmap_dir | egrep "^(Last Changed Date|Revision)" | sed "s/^/  /"];

print $version "\nosm2mp\n";
print $version qx[svn info $osm2mp_dir | egrep "^(Last Changed Date|Revision)" | sed "s/^/  /"];
close $version;

#
# Symlink stuff now that we're finished
#

chdir $today_dir or die "Can't chdir($today_dir): $!";
my @generated = glob "*";

# Symlink latest to the new stuff
chdir $out_dir or die "Can't chdir($out_dir): $!";


for my $file (@generated) {
    my $from = catfile($today_dir, $file);
    my $to = catfile($latest_dir, $file);

    unlink $to if -l $to;

    symlink $from, $to or die "symlink($from, $to): $!";
}

sub help
{
    my %arg = @_;

    Pod::Usage::pod2usage(
        -verbose => $arg{ verbose },
        -exitval => $arg{ exitval } || 0,
    );
}
